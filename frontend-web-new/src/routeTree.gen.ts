/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as ProfilePatientIdUserIndexImport } from './routes/profile/patient/$idUser/index'
import { Route as ProfileCaregiverIdUserIndexImport } from './routes/profile/caregiver/$idUser/index'
import { Route as ProfilePatientIdUserMySchedulesImport } from './routes/profile/patient/$idUser/mySchedules'
import { Route as ProfileCaregiverIdUserMySchedulesImport } from './routes/profile/caregiver/$idUser/mySchedules'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProfilePatientIdUserIndexRoute = ProfilePatientIdUserIndexImport.update({
  id: '/profile/patient/$idUser/',
  path: '/profile/patient/$idUser/',
  getParentRoute: () => rootRoute,
} as any)

const ProfileCaregiverIdUserIndexRoute =
  ProfileCaregiverIdUserIndexImport.update({
    id: '/profile/caregiver/$idUser/',
    path: '/profile/caregiver/$idUser/',
    getParentRoute: () => rootRoute,
  } as any)

const ProfilePatientIdUserMySchedulesRoute =
  ProfilePatientIdUserMySchedulesImport.update({
    id: '/profile/patient/$idUser/mySchedules',
    path: '/profile/patient/$idUser/mySchedules',
    getParentRoute: () => rootRoute,
  } as any)

const ProfileCaregiverIdUserMySchedulesRoute =
  ProfileCaregiverIdUserMySchedulesImport.update({
    id: '/profile/caregiver/$idUser/mySchedules',
    path: '/profile/caregiver/$idUser/mySchedules',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/profile/caregiver/$idUser/mySchedules': {
      id: '/profile/caregiver/$idUser/mySchedules'
      path: '/profile/caregiver/$idUser/mySchedules'
      fullPath: '/profile/caregiver/$idUser/mySchedules'
      preLoaderRoute: typeof ProfileCaregiverIdUserMySchedulesImport
      parentRoute: typeof rootRoute
    }
    '/profile/patient/$idUser/mySchedules': {
      id: '/profile/patient/$idUser/mySchedules'
      path: '/profile/patient/$idUser/mySchedules'
      fullPath: '/profile/patient/$idUser/mySchedules'
      preLoaderRoute: typeof ProfilePatientIdUserMySchedulesImport
      parentRoute: typeof rootRoute
    }
    '/profile/caregiver/$idUser/': {
      id: '/profile/caregiver/$idUser/'
      path: '/profile/caregiver/$idUser'
      fullPath: '/profile/caregiver/$idUser'
      preLoaderRoute: typeof ProfileCaregiverIdUserIndexImport
      parentRoute: typeof rootRoute
    }
    '/profile/patient/$idUser/': {
      id: '/profile/patient/$idUser/'
      path: '/profile/patient/$idUser'
      fullPath: '/profile/patient/$idUser'
      preLoaderRoute: typeof ProfilePatientIdUserIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/profile/caregiver/$idUser/mySchedules': typeof ProfileCaregiverIdUserMySchedulesRoute
  '/profile/patient/$idUser/mySchedules': typeof ProfilePatientIdUserMySchedulesRoute
  '/profile/caregiver/$idUser': typeof ProfileCaregiverIdUserIndexRoute
  '/profile/patient/$idUser': typeof ProfilePatientIdUserIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/profile/caregiver/$idUser/mySchedules': typeof ProfileCaregiverIdUserMySchedulesRoute
  '/profile/patient/$idUser/mySchedules': typeof ProfilePatientIdUserMySchedulesRoute
  '/profile/caregiver/$idUser': typeof ProfileCaregiverIdUserIndexRoute
  '/profile/patient/$idUser': typeof ProfilePatientIdUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/profile/caregiver/$idUser/mySchedules': typeof ProfileCaregiverIdUserMySchedulesRoute
  '/profile/patient/$idUser/mySchedules': typeof ProfilePatientIdUserMySchedulesRoute
  '/profile/caregiver/$idUser/': typeof ProfileCaregiverIdUserIndexRoute
  '/profile/patient/$idUser/': typeof ProfilePatientIdUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/profile/caregiver/$idUser/mySchedules'
    | '/profile/patient/$idUser/mySchedules'
    | '/profile/caregiver/$idUser'
    | '/profile/patient/$idUser'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/profile/caregiver/$idUser/mySchedules'
    | '/profile/patient/$idUser/mySchedules'
    | '/profile/caregiver/$idUser'
    | '/profile/patient/$idUser'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/register'
    | '/profile/caregiver/$idUser/mySchedules'
    | '/profile/patient/$idUser/mySchedules'
    | '/profile/caregiver/$idUser/'
    | '/profile/patient/$idUser/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
  ProfileCaregiverIdUserMySchedulesRoute: typeof ProfileCaregiverIdUserMySchedulesRoute
  ProfilePatientIdUserMySchedulesRoute: typeof ProfilePatientIdUserMySchedulesRoute
  ProfileCaregiverIdUserIndexRoute: typeof ProfileCaregiverIdUserIndexRoute
  ProfilePatientIdUserIndexRoute: typeof ProfilePatientIdUserIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ProfileCaregiverIdUserMySchedulesRoute:
    ProfileCaregiverIdUserMySchedulesRoute,
  ProfilePatientIdUserMySchedulesRoute: ProfilePatientIdUserMySchedulesRoute,
  ProfileCaregiverIdUserIndexRoute: ProfileCaregiverIdUserIndexRoute,
  ProfilePatientIdUserIndexRoute: ProfilePatientIdUserIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/register",
        "/profile/caregiver/$idUser/mySchedules",
        "/profile/patient/$idUser/mySchedules",
        "/profile/caregiver/$idUser/",
        "/profile/patient/$idUser/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/profile/caregiver/$idUser/mySchedules": {
      "filePath": "profile/caregiver/$idUser/mySchedules.tsx"
    },
    "/profile/patient/$idUser/mySchedules": {
      "filePath": "profile/patient/$idUser/mySchedules.tsx"
    },
    "/profile/caregiver/$idUser/": {
      "filePath": "profile/caregiver/$idUser/index.tsx"
    },
    "/profile/patient/$idUser/": {
      "filePath": "profile/patient/$idUser/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
